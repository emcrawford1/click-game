{"version":3,"sources":["logo.svg","Components/Nav.js","Components/InstCard.js","Components/Game.js","Components/Footer.js","Components/MainContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Nav","props","react_default","a","createElement","className","guessMessage","currentScore","topScore","InstaCard","box","marginTop","marginRight","marginBottom","marginLeft","cursor","hover","Game","onMouseOver","onClick","style","src","url","alt","Footer","flexContainer","display","flexWrap","justifyContent","MainContainer","state","pictures","guessStatus","index","_this2","this","picturesCopy","JSON","parse","stringify","console","log","setState","map","picture","shuffle","pictureCopy","randomPictureArr","length","itemsLeft","randomIndex","Math","floor","random","push","splice","_this3","Components_Nav","InstCard","x","Components_Game","key","clickHandler","Components_Footer","Component","App","Components_MainContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73d553a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nfunction Nav(props) {\n  return (\n    <nav className=\"navbar navbar-dark bg-dark sticky-top\">\n      <div className=\"navbar-brand text-white\">Clicky Game!</div>\n      <span className=\"navbar-text text-white d-none d-sm-block\">\n        {props.guessMessage}\n      </span>\n\n      <span className=\"navbar-text text-white\">\n        Score: {props.currentScore} | Top Score: {props.topScore}\n      </span>\n    </nav>\n  );\n}\n\nexport default Nav;\n\n\n\n\n","import React from \"react\";\n\nfunction InstaCard(props) {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\">\n      <div className=\"container\">\n        <h1 className=\"display-4 text-center\">Clicky Game!</h1>\n        <p className=\"lead text-center font-italic\">Click on an image to earn points, but don't click on any more than once!\n      </p>\n      </div>\n    </div>\n  );\n}\n\nexport default InstaCard;","import React from \"react\";\n\nconst box = {\n    marginTop: '1.5%',\n    marginRight: '0.75%',\n    marginBottom: '0%',\n    marginLeft: '0.75%',\n    cursor: 'pointer',\n    hover: 'scale(1.02)'\n}\n\nfunction Game(props) {\n  return (\n    <img className=\"box rounded-lg\" onMouseOver=\"this.style.transform: scale(1.02)\" onClick={props.onClick} style={box} src={props.url} alt=\"picture1\"  />\n  );\n}\n\nexport default Game;","import React from \"react\";\n\nfunction Footer(props) {\n  return (\n    <footer className=\"footer mt-5 py-3 bg-dark margin\">\n    <div className=\"container\">\n      <span className=\"text-white\">Clicky Game!</span>\n    </div>\n  </footer>\n  );\n}\n\nexport default Footer;\n\n\n\n\n\n\n","import React, { Component } from \"react\";\nimport Nav from \"./Nav\";\nimport InstCard from \"./InstCard\";\nimport Game from \"./Game\";\nimport Footer from \"./Footer\";\n\n\n//Styling\nconst flexContainer = {\n  display: 'flex',\n  flexWrap: 'wrap',\n  justifyContent: 'center',\n};\n\nclass MainContainer extends Component {\n  state = {\n    currentScore: 0,\n    topScore: 0,\n    guessMessage: \"Click on an Image to Begin!\",\n    pictures: [\n      {\n        url: \"/images/picture1.jpg\",\n        guessStatus: false\n      },\n\n      {\n        url: \"/images/picture2.jpg\",\n        guessStatus: false\n      },\n\n      {\n        url: \"/images/picture3.jpg\",\n        guessStatus: false\n      },\n\n      {\n        url: \"/images/picture4.jpg\",\n        guessStatus: false\n      },\n\n      {\n        url: \"/images/picture5.jpg\",\n        guessStatus: false\n      },\n\n      {\n        url: \"/images/picture6.jpg\",\n        guessStatus: false\n      },\n\n      {\n        url: \"/images/picture7.jpg\",\n        guessStatus: false\n      },\n\n      {\n        url: \"/images/picture8.jpg\",\n        guessStatus: false\n      },\n\n      {\n        url: \"/images/picture9.jpg\",\n        guessStatus: false\n      },\n\n    ]\n\n  };\n\n  //Functions\n\n  clickHandler(guessStatus, index) {\n    //Creating a copy of the pictures array in the \"state\" object\n    let picturesCopy = JSON.parse(JSON.stringify(this.state.pictures));\n\n    //Setting the guessStatus value in the copied picture array to \"true\" for the picture clicked\n    picturesCopy[index].guessStatus = true;\n\n    console.log(guessStatus);\n\n    //Assigning the value of the pictures array in the state object to the value of the picturesCopy array\n    this.setState({\n      pictures: picturesCopy\n    }, () => {;\n\n    console.log(this.state.pictures);\n\n    //If the guessStatus of the picture that the user clicked was already true (the user had \n    //previously clicked the picture), the code in this 'if' block will run\n    if(guessStatus){\n      if(this.state.currentScore > this.state.topScore) {\n        this.setState({\n          topScore: this.state.currentScore\n        })\n      };\n      this.setState({\n        currentScore: 0,\n        guessMessage: \"You guessed incorrectly!\",\n        pictures: this.state.pictures.map(picture => ({ url: picture.url, guessStatus: false}))\n      });\n\n      //Shuffle the pictures\n      this.shuffle();\n    }\n\n    //If picture was not previously clicked run this code\n    else{\n      console.log(this.state.currentScore);\n      this.setState({\n        currentScore: this.state.currentScore + 1,\n        guessMessage: \"You guessed correctly\",\n        pictures: picturesCopy\n      });\n\n      this.shuffle();\n    }});\n  };\n\n\n  //Shuffle pictures\n  shuffle() {\n    let pictureCopy = JSON.parse(JSON.stringify(this.state.pictures));\n    let randomPictureArr = [];\n    console.log(pictureCopy.length);\n\n    while(pictureCopy.length > 0){\n      let itemsLeft = pictureCopy.length;\n      let randomIndex = Math.floor(Math.random() * itemsLeft);\n      randomPictureArr.push(pictureCopy[randomIndex]);\n      pictureCopy.splice(randomIndex, 1);\n    }\n\n    this.setState({\n      pictures: randomPictureArr\n    })\n  };\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <Nav\n        guessMessage={this.state.guessMessage}\n        currentScore={this.state.currentScore}\n        topScore={this.state.topScore}\n        />\n        <InstCard/>\n        <div style={flexContainer}>\n          {this.state.pictures.map ((x, index)  => (\n            <Game \n            key={index}\n            url={x.url}\n            onClick={() => this.clickHandler(x.guessStatus, index)}\n            />\n          ))}\n          \n        </div>\n        <Footer />\n      </div>\n     \n    )\n  }\n\n}\n\n\nexport default MainContainer;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MainContainer from \"./Components/MainContainer\"\n\n\nfunction App() {\n  return (\n    <MainContainer />\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}